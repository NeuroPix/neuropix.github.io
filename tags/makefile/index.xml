<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Makefile on NeuroPix</title>
    <link>https://neuropix.github.io/tags/makefile/</link>
    <description>Recent content in Makefile on NeuroPix</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Sep 2024 10:00:00 +0800</lastBuildDate>
    <atom:link href="https://neuropix.github.io/tags/makefile/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Makefile 使用指南</title>
      <link>https://neuropix.github.io/posts/makefile-usage-guide/</link>
      <pubDate>Fri, 27 Sep 2024 10:00:00 +0800</pubDate>
      <guid>https://neuropix.github.io/posts/makefile-usage-guide/</guid>
      <description>&lt;h1 id=&#34;makefile-使用指南&#34;&gt;Makefile 使用指南&lt;/h1&gt;&#xA;&lt;p&gt;在软件开发中，自动化构建和部署过程能够极大提高效率。&lt;strong&gt;Makefile&lt;/strong&gt; 是一个用于自动化执行指令的工具，它允许开发者定义和管理项目的构建过程。本文将介绍 Makefile 的基本概念及其在项目中的使用方法。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是-makefile&#34;&gt;什么是 Makefile？&lt;/h2&gt;&#xA;&lt;p&gt;Makefile 是一种文本文件，用于定义如何自动化执行任务，特别是在编译和链接程序时。它通常与 &lt;code&gt;make&lt;/code&gt; 命令一起使用，可以根据文件的修改时间来决定哪些任务需要重新执行。&lt;/p&gt;&#xA;&lt;h2 id=&#34;makefile-的基本结构&#34;&gt;Makefile 的基本结构&lt;/h2&gt;&#xA;&lt;p&gt;一个简单的 Makefile 结构通常包括以下几个部分：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;目标（Target）&lt;/strong&gt;: 要生成的文件或要执行的任务。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;依赖（Dependencies）&lt;/strong&gt;: 目标所依赖的文件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;命令（Commands）&lt;/strong&gt;: 生成目标所需执行的命令。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;target&lt;/span&gt;: dependencies&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;command&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;makefile-示例&#34;&gt;Makefile 示例&lt;/h2&gt;&#xA;&lt;p&gt;下面是一个简单的 Makefile 示例，演示如何编译一个 C++ 项目：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;CC&lt;/span&gt; = g++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;CFLAGS&lt;/span&gt; = -Wall -g&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOURCES&lt;/span&gt; = main.cpp utils.cpp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;EXECUTABLE&lt;/span&gt; = my_program&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;all&lt;/span&gt;: &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOURCES&lt;/span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;EXECUTABLE&lt;/span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$(EXECUTABLE)&lt;/span&gt;: &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOURCES&lt;/span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;$(&lt;/span&gt;CC&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;$(&lt;/span&gt;SOURCES&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;)&lt;/span&gt; -o &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;$(&lt;/span&gt;EXECUTABLE&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;clean&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rm -f &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;$(&lt;/span&gt;EXECUTABLE&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解释&#34;&gt;解释：&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CC&lt;/code&gt; 和 &lt;code&gt;CFLAGS&lt;/code&gt; 是变量，分别代表编译器和编译选项。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SOURCES&lt;/code&gt; 是源文件列表，&lt;code&gt;EXECUTABLE&lt;/code&gt; 是最终生成的可执行文件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;all&lt;/code&gt; 是默认目标，执行 &lt;code&gt;make&lt;/code&gt; 时会调用它。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;clean&lt;/code&gt; 是清理目标，用于删除生成的可执行文件。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;在项目中使用-makefile&#34;&gt;在项目中使用 Makefile&lt;/h2&gt;&#xA;&lt;p&gt;在项目中使用 Makefile，可以使构建、测试和部署过程更加高效。以下是一些常见的用法：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
